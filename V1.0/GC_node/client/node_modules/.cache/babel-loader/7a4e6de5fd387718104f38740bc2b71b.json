{"remainingRequest":"F:\\Worker\\abig_GCGuardBeach\\V1.0\\GC_node\\client\\node_modules\\babel-loader\\lib\\index.js!F:\\Worker\\abig_GCGuardBeach\\V1.0\\GC_node\\client\\node_modules\\eslint-loader\\index.js??ref--13-0!F:\\Worker\\abig_GCGuardBeach\\V1.0\\GC_node\\client\\src\\https.js","dependencies":[{"path":"F:\\Worker\\abig_GCGuardBeach\\V1.0\\GC_node\\client\\src\\https.js","mtime":1572148599994},{"path":"F:\\Worker\\abig_GCGuardBeach\\V1.0\\GC_node\\client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"F:\\Worker\\abig_GCGuardBeach\\V1.0\\GC_node\\client\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"F:\\Worker\\abig_GCGuardBeach\\V1.0\\GC_node\\client\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.to-string\";\nimport axios from 'axios';\nimport qs from 'qs';\n\nvar CryptoJS = require(\"crypto-js\");\n\naxios.defaults.timeout = 5000; //响应时间\n\naxios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded'; //配置请求头\n\naxios.defaults.baseURL = ''; //配置接口地址\n//POST传参序列化(添加请求拦截器)\n\naxios.interceptors.request.use(function (config) {\n  //在发送请求之前做某件事\n  if (config.method === 'post') {\n    // 防止明文发送\n    var keyTemp = [];\n\n    for (var key in config.data) {\n      keyTemp.push(key);\n    }\n\n    if (keyTemp.length == 2) {\n      if (keyTemp.indexOf(\"email\") != -1 && keyTemp.indexOf(\"password\") != -1) {\n        // 字段加密\n        var email = CryptoJS.AES.encrypt('emailSct', 'email').toString();\n        var password = CryptoJS.AES.encrypt('passwordSct', 'password').toString(); // 值加密\n\n        var secretEmail = CryptoJS.AES.encrypt(config.data.email, 'secret key emailAbc').toString();\n        var secretPsw = CryptoJS.AES.encrypt(config.data.password, 'secret key passwordAbc').toString();\n        var item = {};\n        item[email] = secretEmail;\n        item[password] = secretPsw;\n        config.data = item;\n      }\n    }\n\n    config.data = qs.stringify(config.data);\n  }\n\n  return config;\n}, function (error) {\n  console.log('错误的传参');\n  return Promise.reject(error);\n}); //返回状态判断(添加响应拦截器)\n\naxios.interceptors.response.use(function (res) {\n  //对响应数据做些事\n  if (!res.data.success) {\n    return Promise.resolve(res);\n  }\n\n  return res;\n}, function (error) {\n  console.log('网络异常');\n  return Promise.reject(error);\n}); //返回一个Promise(发送post请求)\n\nexport function fetchPost(url, param, header) {\n  return new Promise(function (resolve, reject) {\n    axios.post(url, param, {\n      headers: header\n    }).then(function (response) {\n      resolve(response);\n    }, function () {\n      resolve('oauthError'); // reject(err)\n    }).catch(function (error) {\n      reject(error);\n    });\n  });\n} ////返回一个Promise(发送get请求)\n\nexport function fetchGet(url, param, header) {\n  return new Promise(function (resolve, reject) {\n    axios.get(url, {\n      params: param,\n      headers: header\n    }).then(function (response) {\n      resolve(response);\n    } // 用户登录失败导致\n    , function () {\n      resolve('oauthError'); // reject(err)\n    }).catch(function (error) {\n      reject(error);\n    });\n  });\n}\nexport default {\n  fetchPost: fetchPost,\n  fetchGet: fetchGet\n};",{"version":3,"sources":["F:\\Worker\\abig_GCGuardBeach\\V1.0\\GC_node\\client\\src\\https.js"],"names":["axios","qs","CryptoJS","require","defaults","timeout","headers","post","baseURL","interceptors","request","use","config","method","keyTemp","key","data","push","length","indexOf","email","AES","encrypt","toString","password","secretEmail","secretPsw","item","stringify","error","console","log","Promise","reject","response","res","success","resolve","fetchPost","url","param","header","then","catch","fetchGet","get","params"],"mappings":"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","sourcesContent":["import axios from 'axios'\r\nimport qs from 'qs'\r\nvar CryptoJS = require(\"crypto-js\");\r\n\r\naxios.defaults.timeout = 5000;                        //响应时间\r\naxios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded';        //配置请求头\r\naxios.defaults.baseURL = '';   //配置接口地址\r\n\r\n//POST传参序列化(添加请求拦截器)\r\naxios.interceptors.request.use((config) => {\r\n    //在发送请求之前做某件事\r\n    if (config.method === 'post') {\r\n        // 防止明文发送\r\n\r\n        let keyTemp = []\r\n        for (const key in config.data) {\r\n            keyTemp.push(key)\r\n        }\r\n        if (keyTemp.length == 2) {\r\n            if (keyTemp.indexOf(\"email\") != -1 && keyTemp.indexOf(\"password\") != -1) {\r\n                // 字段加密\r\n                let email = CryptoJS.AES.encrypt('emailSct', 'email').toString();\r\n                let password = CryptoJS.AES.encrypt('passwordSct', 'password').toString();\r\n                // 值加密\r\n                let secretEmail = CryptoJS.AES.encrypt(config.data.email, 'secret key emailAbc').toString();\r\n                let secretPsw = CryptoJS.AES.encrypt(config.data.password, 'secret key passwordAbc').toString();\r\n\r\n\r\n                let item = {}\r\n                item[email] = secretEmail\r\n                item[password] = secretPsw\r\n                config.data = item\r\n            }\r\n        }\r\n\r\n        config.data = qs.stringify(config.data);\r\n    }\r\n    return config;\r\n}, (error) => {\r\n    console.log('错误的传参')\r\n    return Promise.reject(error);\r\n});\r\n\r\n//返回状态判断(添加响应拦截器)\r\naxios.interceptors.response.use((res) => {\r\n    //对响应数据做些事\r\n    if (!res.data.success) {\r\n        return Promise.resolve(res);\r\n    }\r\n    return res;\r\n}, (error) => {\r\n    console.log('网络异常')\r\n    return Promise.reject(error);\r\n});\r\n\r\n//返回一个Promise(发送post请求)\r\nexport function fetchPost(url, param, header) {\r\n    return new Promise((resolve, reject) => {\r\n        axios.post(url, param, {\r\n            headers: header\r\n        })\r\n            .then(response => {\r\n                resolve(response);\r\n            }, () => {\r\n                resolve('oauthError');\r\n                // reject(err)\r\n            })\r\n            .catch((error) => {\r\n                reject(error)\r\n            })\r\n    })\r\n}\r\n////返回一个Promise(发送get请求)\r\nexport function fetchGet(url, param, header) {\r\n    return new Promise((resolve, reject) => {\r\n        axios.get(url, {\r\n            params: param,\r\n            headers: header\r\n        })\r\n            .then(response => {\r\n                resolve(response);\r\n            }\r\n                // 用户登录失败导致\r\n                , () => {\r\n                    resolve('oauthError');\r\n                    // reject(err)\r\n                })\r\n            .catch((error) => {\r\n                reject(error)\r\n            })\r\n    })\r\n}\r\nexport default {\r\n    fetchPost,\r\n    fetchGet,\r\n}"]}]}